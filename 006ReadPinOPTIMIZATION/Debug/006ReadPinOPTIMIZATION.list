
006ReadPinOPTIMIZATION.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000198  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002c8  080002d0  000102d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002c8  080002c8  000102d0  2**0
                  CONTENTS
  4 .ARM          00000000  080002c8  080002c8  000102d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002c8  080002d0  000102d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002c8  080002c8  000102c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000102d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080002d0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080002d0  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000102d0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000102f9  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000148  00000000  00000000  0001033c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000095  00000000  00000000  00010484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000048  00000000  00000000  00010520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000002d  00000000  00000000  00010568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000f58  00000000  00000000  00010595  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000004a9  00000000  00000000  000114ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00003bf3  00000000  00000000  00011996  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000058  00000000  00000000  0001558c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000086  00000000  00000000  000155e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080002b0 	.word	0x080002b0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080002b0 	.word	0x080002b0

08000170 <main>:




int main(void)
{
 8000170:	b480      	push	{r7}
 8000172:	b087      	sub	sp, #28
 8000174:	af00      	add	r7, sp, #0
    uint32_t volatile *pClkRg = 	(uint32_t*)0x40021018; // APB2 EN NUCLEO STM32F103RB
 8000176:	4b22      	ldr	r3, [pc, #136]	; (8000200 <main+0x90>)
 8000178:	617b      	str	r3, [r7, #20]
    uint32_t volatile *pPortAMode = (uint32_t*)0x40010800; // ESTO PARA EL MODO DEL PUERTO A5
 800017a:	4b22      	ldr	r3, [pc, #136]	; (8000204 <main+0x94>)
 800017c:	613b      	str	r3, [r7, #16]
    uint32_t volatile *pPortAOut= 	(uint32_t*)0x4001080C; // ESTO PARA EL PUERTO A5
 800017e:	4b22      	ldr	r3, [pc, #136]	; (8000208 <main+0x98>)
 8000180:	60fb      	str	r3, [r7, #12]
    uint32_t volatile *pPortBMode = (uint32_t*)0x40010C00; // ESTO PARA EL MODO DEL PUERTO B7
 8000182:	4b22      	ldr	r3, [pc, #136]	; (800020c <main+0x9c>)
 8000184:	60bb      	str	r3, [r7, #8]
    uint32_t volatile *pPortBIn= 	(uint32_t*)0x40010C08; // ESTO PARA EL PUERTO B7
 8000186:	4b22      	ldr	r3, [pc, #136]	; (8000210 <main+0xa0>)
 8000188:	607b      	str	r3, [r7, #4]

    //1.- Se parte a encender el GPIO CLOCK del Puerto A y B
    *pClkRg |= (1<<2);
 800018a:	697b      	ldr	r3, [r7, #20]
 800018c:	681b      	ldr	r3, [r3, #0]
 800018e:	f043 0204 	orr.w	r2, r3, #4
 8000192:	697b      	ldr	r3, [r7, #20]
 8000194:	601a      	str	r2, [r3, #0]
    *pClkRg |= (1<<3);
 8000196:	697b      	ldr	r3, [r7, #20]
 8000198:	681b      	ldr	r3, [r3, #0]
 800019a:	f043 0208 	orr.w	r2, r3, #8
 800019e:	697b      	ldr	r3, [r7, #20]
 80001a0:	601a      	str	r2, [r3, #0]

    //2.- Se configura el modo del puerto a SALIDA para el PINA5
    *pPortAMode &=~ (15<<20);
 80001a2:	693b      	ldr	r3, [r7, #16]
 80001a4:	681b      	ldr	r3, [r3, #0]
 80001a6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80001aa:	693b      	ldr	r3, [r7, #16]
 80001ac:	601a      	str	r2, [r3, #0]
    *pPortAMode |= (1<<20);
 80001ae:	693b      	ldr	r3, [r7, #16]
 80001b0:	681b      	ldr	r3, [r3, #0]
 80001b2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80001b6:	693b      	ldr	r3, [r7, #16]
 80001b8:	601a      	str	r2, [r3, #0]

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//2.1 Se configura como entrada para el PINB7
	*pPortBMode &=~ (15<<28);
 80001ba:	68bb      	ldr	r3, [r7, #8]
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80001c2:	68bb      	ldr	r3, [r7, #8]
 80001c4:	601a      	str	r2, [r3, #0]
	*pPortBMode |= (1<<31);
 80001c6:	68bb      	ldr	r3, [r7, #8]
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80001ce:	68bb      	ldr	r3, [r7, #8]
 80001d0:	601a      	str	r2, [r3, #0]

	while(1)
	{
		uint8_t pinStatus = (uint8_t)(*pPortBIn & 0x80);
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	b2db      	uxtb	r3, r3
 80001d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80001dc:	70fb      	strb	r3, [r7, #3]

		if (!pinStatus)
 80001de:	78fb      	ldrb	r3, [r7, #3]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d106      	bne.n	80001f2 <main+0x82>
		{
			//3.- Configurar como HIGH el pin5 en ODR
			*pPortAOut |= (1<<5);
 80001e4:	68fb      	ldr	r3, [r7, #12]
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	f043 0220 	orr.w	r2, r3, #32
 80001ec:	68fb      	ldr	r3, [r7, #12]
 80001ee:	601a      	str	r2, [r3, #0]
 80001f0:	e7ef      	b.n	80001d2 <main+0x62>
		}
		else
		{
			*pPortAOut &=~ (1<<5);
 80001f2:	68fb      	ldr	r3, [r7, #12]
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	f023 0220 	bic.w	r2, r3, #32
 80001fa:	68fb      	ldr	r3, [r7, #12]
 80001fc:	601a      	str	r2, [r3, #0]
	{
 80001fe:	e7e8      	b.n	80001d2 <main+0x62>
 8000200:	40021018 	.word	0x40021018
 8000204:	40010800 	.word	0x40010800
 8000208:	4001080c 	.word	0x4001080c
 800020c:	40010c00 	.word	0x40010c00
 8000210:	40010c08 	.word	0x40010c08

08000214 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000214:	480d      	ldr	r0, [pc, #52]	; (800024c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000216:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000218:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800021c:	480c      	ldr	r0, [pc, #48]	; (8000250 <LoopForever+0x6>)
  ldr r1, =_edata
 800021e:	490d      	ldr	r1, [pc, #52]	; (8000254 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000220:	4a0d      	ldr	r2, [pc, #52]	; (8000258 <LoopForever+0xe>)
  movs r3, #0
 8000222:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000224:	e002      	b.n	800022c <LoopCopyDataInit>

08000226 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000226:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000228:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800022a:	3304      	adds	r3, #4

0800022c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800022c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800022e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000230:	d3f9      	bcc.n	8000226 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000232:	4a0a      	ldr	r2, [pc, #40]	; (800025c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000234:	4c0a      	ldr	r4, [pc, #40]	; (8000260 <LoopForever+0x16>)
  movs r3, #0
 8000236:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000238:	e001      	b.n	800023e <LoopFillZerobss>

0800023a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800023a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800023c:	3204      	adds	r2, #4

0800023e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800023e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000240:	d3fb      	bcc.n	800023a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000242:	f000 f811 	bl	8000268 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000246:	f7ff ff93 	bl	8000170 <main>

0800024a <LoopForever>:

LoopForever:
  b LoopForever
 800024a:	e7fe      	b.n	800024a <LoopForever>
  ldr   r0, =_estack
 800024c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000250:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000254:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000258:	080002d0 	.word	0x080002d0
  ldr r2, =_sbss
 800025c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000260:	2000001c 	.word	0x2000001c

08000264 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000264:	e7fe      	b.n	8000264 <ADC1_2_IRQHandler>
	...

08000268 <__libc_init_array>:
 8000268:	b570      	push	{r4, r5, r6, lr}
 800026a:	2600      	movs	r6, #0
 800026c:	4d0c      	ldr	r5, [pc, #48]	; (80002a0 <__libc_init_array+0x38>)
 800026e:	4c0d      	ldr	r4, [pc, #52]	; (80002a4 <__libc_init_array+0x3c>)
 8000270:	1b64      	subs	r4, r4, r5
 8000272:	10a4      	asrs	r4, r4, #2
 8000274:	42a6      	cmp	r6, r4
 8000276:	d109      	bne.n	800028c <__libc_init_array+0x24>
 8000278:	f000 f81a 	bl	80002b0 <_init>
 800027c:	2600      	movs	r6, #0
 800027e:	4d0a      	ldr	r5, [pc, #40]	; (80002a8 <__libc_init_array+0x40>)
 8000280:	4c0a      	ldr	r4, [pc, #40]	; (80002ac <__libc_init_array+0x44>)
 8000282:	1b64      	subs	r4, r4, r5
 8000284:	10a4      	asrs	r4, r4, #2
 8000286:	42a6      	cmp	r6, r4
 8000288:	d105      	bne.n	8000296 <__libc_init_array+0x2e>
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000290:	4798      	blx	r3
 8000292:	3601      	adds	r6, #1
 8000294:	e7ee      	b.n	8000274 <__libc_init_array+0xc>
 8000296:	f855 3b04 	ldr.w	r3, [r5], #4
 800029a:	4798      	blx	r3
 800029c:	3601      	adds	r6, #1
 800029e:	e7f2      	b.n	8000286 <__libc_init_array+0x1e>
 80002a0:	080002c8 	.word	0x080002c8
 80002a4:	080002c8 	.word	0x080002c8
 80002a8:	080002c8 	.word	0x080002c8
 80002ac:	080002cc 	.word	0x080002cc

080002b0 <_init>:
 80002b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002b2:	bf00      	nop
 80002b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002b6:	bc08      	pop	{r3}
 80002b8:	469e      	mov	lr, r3
 80002ba:	4770      	bx	lr

080002bc <_fini>:
 80002bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002be:	bf00      	nop
 80002c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002c2:	bc08      	pop	{r3}
 80002c4:	469e      	mov	lr, r3
 80002c6:	4770      	bx	lr
